<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="imp-return-refactoring4" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Code Refactoring</title>

  <activity label="imp-return-refactoringFileProcess">
    <statement>
      <p>
        There is a copy of the following code block in an interactive mode that you can modify and compile. Your task is to improve the code's style as an expert would view it, while ensuring its behavior remains unchanged. You may run your refactored code to verify that it still passes all test cases.
      </p>
      <program language="java">
        <input>
        <![CDATA[
       
		public class FileProcess {
			public static boolean canProcessFile(int fileSize, boolean hasPermission) {
				if (!hasPermission) {
					   return false; 
				}
				if (fileSize >= 1024) {
					   return false; 
				}
				return true;
			}
		}
		
        ]]>
        </input>
      </program>
    </statement>
    
  
    <program label="imp-return-refactoringFileProcess-code" interactive="activecode" language="java" >
      <input> 
       <![CDATA[
       
		public class FileProcess {
			public static boolean canProcessFile(int fileSize, boolean hasPermission) {
				if (!hasPermission) {
					   return false; 
				}
				if (fileSize >= 1024) {
					   return false; 
				}
				return true;
			}
		}
		
        ]]>
      </input>

      <tests>
        import static org.junit.Assert.*;
		import org.junit.Test;
		import java.io.*;

		public class RunestoneTests extends CodeTestHelper {

			public RunestoneTests() {
				super("FileProcess");
			}

			// Test for permission be false
			@Test
			public void testPermission() throws IOException {
				Object[] args = {1010,false};  // Arguments for the method
				String output = getMethodOutput("canProcessFile", args);
				String expect = Boolean.toString(false);  // Convert expected boolean to String
				
				boolean passed = getResults(expect, output, "canProcessFile(1010,false)");  
				assertTrue(passed);
			}

			// Test for true 
			@Test
			public void testCanProcess() throws IOException {
				Object[] args = {1032, true};  // Arguments for the method
				String output = getMethodOutput("canProcessFile", args);
				String expect = Boolean.toString(false);  // Convert expected boolean to String
				
				boolean passed = getResults(expect, output, "canProcessFile(1032,false)");  
				assertTrue(passed);
			}

			// Test for high volume file
			@Test
			public void testLargeFile() throws IOException {
				Object[] args = {1040, true};  // Arguments for the method
				String output = getMethodOutput("canProcessFile", args);
				String expect = Boolean.toString(false);  // Convert expected boolean to String
				
				boolean passed = getResults(expect, output, "canProcessFile(1040, true)");  
				assertTrue(passed);
			}

			

		}



      </tests>
    </program>
  </activity>
  
  
     <activity label="imp-return-refactoringFileProcess-response">
    <statement>
      <p>
        Which of the following code blocks is the most similar to your final refactored code for the previous question?
      </p>
    </statement>
    
    
    
    
     <choices>
    <choice correct="no">
      <statement> 
       <program language="java">
          <input>
public class FileProcess {
	public static boolean canProcessFile(int fileSize, boolean hasPermission) {
		if (!hasPermission || fileSize >= 1024) {
			return false; 
		}
		return true;
	}
}	
          </input>
        </program>
      </statement>
      <feedback>
        <p>
            This code can further be improved!
        </p>
      </feedback>
    </choice>
   
   <choice correct="no">
      <statement> 
       <program language="java">
          <input>
public class FileProcess {
	public static boolean canProcessFile(int fileSize, boolean hasPermission) {
		if (hasPermission &amp;&amp; fileSize &lt; 1024) {
			return true; 
		}
		return false;
	}
}	
		</input>
        </program>
      </statement>
      <feedback>
        <p>
           This code can further be improved!
        </p>
      </feedback>
    </choice>
   
   <choice correct="yes">
      <statement> 
       <program language="java">
          <input>
public class FileProcess {
	public static boolean canProcessFile(int fileSize, boolean hasPermission) {
		return hasPermission &amp;&amp; fileSize &lt; 1024;
	}
}	
		</input>
        </program>
      </statement>
      <feedback>
        <p>
           You refactored correctly!
        </p>
      </feedback>
    </choice>   
    
    </choices>
  </activity>
  
</section>

