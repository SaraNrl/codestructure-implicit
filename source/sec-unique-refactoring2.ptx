<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="imp-unique-refactoring2" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Code Refactoring</title>

  <activity label="imp-unique-refactoringPrintDiscount">
    <statement>
      <p>
        You will see a copy of the <c>printDiscount()</c> function in an interactive mode where you can modify and compile it. We want you to improve the style of this function as an expert would view it without changing its behavior. To ensure this you can run your refactored code and compare the expected print messages with what your refactored method actually prints.
      </p>
      <program language="java">
        <input>
        <![CDATA[
       
public class FinalPrice {
  public static void printDiscount(String itemType, double originalPrice, boolean hasSpecialOffer) {  
    double standardDiscount = 0.15;
	double bulkDiscount = 0.25;
	double vipDiscount = 0.5;
	String introMessage = "Item: " + itemType + ", Original Price: $" + originalPrice + ". ";
	String finalMessage = "Discounted Price: $";

	if ("electronics".equals(itemType) && hasSpecialOffer) {
		String message = introMessage;
		message += "Special offer applied. " + finalMessage;
		double discountedPrice = originalPrice * (1 - vipDiscount);
		message += discountedPrice;
		System.out.println(message);
	} else if (originalPrice > 200) {
		String message = introMessage;
		message += "Bulk discount applied. " + finalMessage;
		double discountedPrice = originalPrice * (1 - bulkDiscount);
		message += discountedPrice;
		System.out.println(message);
    } else {
	    String message = introMessage;
		message += finalMessage;
		double discountedPrice = originalPrice * (1 - standardDiscount);
		message += discountedPrice;
		System.out.println(message);
	}
  }
  
  public static void main(String[] args) {
        // Test Case 1: printDiscount("clothes", 300.0, true);
        System.out.println("Test Case 1: printDiscount("clothes", 300.0, true);");
        System.out.println("Expected Output: Item: clothes, Original Price: $300.0. Bulk discount applied. Discounted Price: $225.0");
        System.out.print("Actual Output: ");
        printDiscount("clothes", 300.0, true);
        
        // Test Case 2: printDiscount("clothes", 500.0, false);
        System.out.println("\nTest Case 2: printDiscount("clothes", 500.0, false);");
        System.out.println("Expected Output: Item: clothes, Original Price: $500.0. Bulk discount applied. Discounted Price: $375.0");
        System.out.print("Actual Output: ");
        printDiscount("clothes", 500.0, false);

        // Test Case 3: printDiscount("electronics", 500.0, true);
        System.out.println("\nTest Case 3: printDiscount("electronics", 500.0, true);");
        System.out.println("Expected Output: Item: electronics, Original Price: $500.0. Special offer applied. Discounted Price: $250.0");
        System.out.print("Actual Output: ");
        printDiscount("electronics", 500.0, true);
    }
}
		
        ]]>
        </input>
      </program>
    </statement>
    
  
    <program label="imp-unique-refactoringPrintDiscount-code" interactive="activecode" language="java" >
      <input>  <![CDATA[
        
public class FinalPrice {
  public static void printDiscount(String itemType, double originalPrice, boolean hasSpecialOffer) {  
    double standardDiscount = 0.15;
	double bulkDiscount = 0.25;
	double vipDiscount = 0.5;
	String introMessage = "Item: " + itemType + ", Original Price: $" + originalPrice + ". ";
	String finalMessage = "Discounted Price: $";

	if ("electronics".equals(itemType) && hasSpecialOffer) {
		String message = introMessage;
		message += "Special offer applied. " + finalMessage;
		double discountedPrice = originalPrice * (1 - vipDiscount);
		message += discountedPrice;
		System.out.println(message);
	} else if (originalPrice > 200) {
		String message = introMessage;
		message += "Bulk discount applied. " + finalMessage;
		double discountedPrice = originalPrice * (1 - bulkDiscount);
		message += discountedPrice;
		System.out.println(message);
    } else {
	    String message = introMessage;
		message += finalMessage;
		double discountedPrice = originalPrice * (1 - standardDiscount);
		message += discountedPrice;
		System.out.println(message);
	}
  }
  
  public static void main(String[] args) {
        // Test Case 1: printDiscount("clothes", 300.0, true);
        System.out.println("Test Case 1: printDiscount("clothes", 300.0, true);");
        System.out.println("Expected Output: Item: clothes, Original Price: $300.0. Bulk discount applied. Discounted Price: $225.0");
        System.out.print("Actual Output: ");
        printDiscount("clothes", 300.0, true);
        
        // Test Case 2: printDiscount("clothes", 500.0, false);
        System.out.println("\nTest Case 2: printDiscount("clothes", 500.0, false);");
        System.out.println("Expected Output: Item: clothes, Original Price: $500.0. Bulk discount applied. Discounted Price: $375.0");
        System.out.print("Actual Output: ");
        printDiscount("clothes", 500.0, false);

        // Test Case 3: printDiscount("electronics", 500.0, true);
        System.out.println("\nTest Case 3: printDiscount("electronics", 500.0, true);");
        System.out.println("Expected Output: Item: electronics, Original Price: $500.0. Special offer applied. Discounted Price: $250.0");
        System.out.print("Actual Output: ");
        printDiscount("electronics", 500.0, true);
    }
}
		
         ]]>
      </input>

      <tests>
     	<tests>
     	import static org.junit.Assert.*;
		import org.junit.Test;
		import java.io.*;
		import org.junit.Before;
		import org.junit.After;
		import java.io.ByteArrayOutputStream;
		import java.io.PrintStream;

		public class RunestoneTests extends CodeTestHelper {
			
			public RunestoneTests() {
				super("FinalPrice");
		  	}
			@Test
          public void testElectronics() throws IOException {
            Object[] args = {"electronics", 500.0, true};
            String output = getMethodOutput("printDiscount", args);
            //System.out.println(output);
            String expectedMessage = "Item: electronics, Original Price: $500.0. Special offer applied. Discounted Price: $250.0";
               boolean passed = getResults(expectedMessage, output.trim(), "printDiscount(\"electronics\", 500.0, true)");
               
               assertTrue(passed);


          }
          @Test
          public void bulk1() throws IOException {
            Object[] args = {"clothes", 300.0, true};
            String output = getMethodOutput("printDiscount", args);
            //System.out.println(output);

            String expectedMessage = "Item: clothes, Original Price: $300.0. Bulk discount applied. Discounted Price: $225.0";
               boolean passed = getResults(expectedMessage, output.trim(), "printDiscount(\"clothes\", 300.0, true)");
               
               assertTrue(passed);

          }
          @Test
          public void bulk2() throws IOException {
            Object[] args = {"clothes", 500.0, false};
            String output = getMethodOutput("printDiscount", args);
            //System.out.println(output);
            String expectedMessage = "Item: clothes, Original Price: $500.0. Bulk discount applied. Discounted Price: $375.0";
            boolean passed = getResults(expectedMessage, output.trim(), "printDiscount(\"clothes\", 500.0, false)");
               
               assertTrue(passed);

          }
		
}
</tests>

      </tests>
    </program>
  </activity>
  
  
  
   <activity label="imp-unique-refactoringPrintDiscount-response">
    <statement>
      <p>
        Which of the following code blocks is the most similar to your final refactored printDiscount() function?
      </p>
    </statement>

     <choices>
    <choice correct="no">
      <statement> 
       <program language="java">
          <input>
           <![CDATA[
  public static void printDiscount(String itemType, double originalPrice, boolean hasSpecialOffer) {  
    double standardDiscount = 0.15;
    double bulkDiscount = 0.25;
    double vipDiscount = 0.5;
    double discountedPrice = 0;
    String introMessage = "Item: " + itemType + ", Original Price: $" + originalPrice + ". ";
    String finalMessage = "Discounted Price: $";
        
    

    if ("electronics".equals(itemType) && hasSpecialOffer) {
       introMessage += "Special offer applied. "; 
       discountedPrice = originalPrice * (1 - vipDiscount);
    } else if (originalPrice > 200) {
       introMessage += "Bulk discount applied. ";
       discountedPrice = originalPrice * (1 - bulkDiscount);
    } else {
       discountedPrice = originalPrice * (1 - standardDiscount);
    }   
    String message = introMessage + finalMessage + discountedPrice;
    System.out.println(message);
  }


]]>
          </input>
        </program>
      </statement>
      <feedback>
        <p>
            You are on the right track, but it is not well-structured yet, so keep improving it further.
        </p>
      </feedback>
    </choice>
   
   <choice correct="yes">
      <statement> 
       <program language="java">
          <input>

    public static void printDiscount(String itemType, double originalPrice, boolean hasSpecialOffer) {  
        double standardDiscount = 0.15;
        double bulkDiscount = 0.25;
        double vipDiscount = 0.5;
        double discountType = 0;
        double finalPrice;

        String introMessage = "Item: " + itemType + ", Original Price: $" + originalPrice + ". ";
        String finalMessage = "Discounted Price: $";

        if ("electronics".equals(itemType) &amp;&amp; hasSpecialOffer) {
            introMessage += "Special offer applied. "; 
            discountType = vipDiscount;
        } else if (originalPrice > 200) {
            introMessage += "Bulk discount applied. ";
            discountType = bulkDiscount;
        } else {
            discountType = standardDiscount;
        }  

        finalPrice = originalPrice * (1 - discountType);
        String message = introMessage + finalMessage + finalPrice;
        System.out.println(message);
    }


	
		</input>
        </program>
      </statement>
      <feedback>
        <p>
           You refactored correctly!
        </p>
      </feedback>
    </choice>


   <choice correct="yes">
      <statement> 
       <program language="java">
          <input>
    public static void printDiscount(String itemType, double originalPrice, boolean hasSpecialOffer) {  
        String introMessage = "Item: " + itemType + ", Original Price: $" + originalPrice + ". ";
        String finalMessage = "Discounted Price: $";
        double discountRate = 0.15;
        String message = "";

        if ("electronics".equals(itemType) &amp;&amp; hasSpecialOffer) {
            discountRate = 0.5;
            message = "Special offer applied. ";
        } else if (originalPrice > 200) {
            discountRate = 0.25;
            message = "Bulk discount applied. ";
        }

        double finalPrice = originalPrice * (1 - discountRate);
        String printMessage = introMessage + message + finalMessage + finalPrice;
        System.out.println(printMessage);
    }


	
		</input>
        </program>
      </statement>
      <feedback>
        <p>
           You refactored correctly!
        </p>
      </feedback>
    </choice>   
   
    
    </choices>
  </activity>
</section>

