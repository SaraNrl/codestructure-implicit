<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="imp-return-refactoring5" xmlns:xi="http://www.w3.org/2001/XInclude" >
  <title>Code Refactoring</title>

  <activity label="imp-return-refactoringCredentialCheck">
    <statement>
      <p>
        There is a copy of the following code block in an interactive mode that you can compile. Your task is to improve the code's style as an expert would view it, while ensuring its behavior remains unchanged. You may run your refactored code to verify that it still passes all test cases.
      </p>
      <program language="java">
        <input>
        <![CDATA[
public class CredentialCheck {
    private String username;
    private String password;
    private int age;

    // Constructor to initialize the fields
    public CredentialCheck(String username, String password, int age) {
        this.username = username;
        this.password = password;
        this.age = age;
    }

    // Check if the credentials are valid
    public boolean hasValidCredentials() {
        if (isValidUsername() && isValidPassword() && age >= 18) {
            return true;
        }
        return false;
    }

    // Check if the username is valid
    private boolean isValidUsername() {
        if (username != null) {
            if (username.length() >= 3 && username.length() < 10) {
                return true;
            }
        }
        return false;
    }

    // Check if the password is valid
    private boolean isValidPassword() {
        if (password == null) {
            return false;
        } else if (!isValidUsername()) {
            return false;
        } else if (password.contains(username)) {
            return false;
        }
        return true;
    }
}
			
        ]]>
        </input>
      </program>
    </statement>
    
  
    <program label="imp-return-refactoringCredentialCheck-code" interactive="activecode" language="java" >
      <input> 
       <![CDATA[
public class CredentialCheck {
    private String username;
    private String password;
    private int age;

    // Constructor to initialize the fields
    public CredentialCheck(String username, String password, int age) {
        this.username = username;
        this.password = password;
        this.age = age;
    }

    // Check if the credentials are valid
    public boolean hasValidCredentials() {
        if (isValidUsername() && isValidPassword() && age >= 18) {
            return true;
        }
        return false;
    }

    // Check if the username is valid
    private boolean isValidUsername() {
        if (username != null) {
            if (username.length() >= 3 && username.length() < 10) {
                return true;
            }
        }
        return false;
    }

    // Check if the password is valid
    private boolean isValidPassword() {
        if (password == null) {
            return false;
        } else if (!isValidUsername()) {
            return false;
        } else if (password.contains(username)) {
            return false;
        }
        return true;
    }
}

        ]]>
      </input>

      <tests>
        import static org.junit.Assert.*;
		import org.junit.Test;
		import java.io.*;

		public class RunestoneTests extends CodeTestHelper {

			public RunestoneTests() {
				super("CredentialCheck");
			}
			

			@Test
			public void testTrue() throws IOException {
				var credCheck = new CredentialCheck("abc", "231", 18);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(true);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			}


			// Test for only username not valid 
			@Test
			public void testUsername() throws IOException {
				var credCheck = new CredentialCheck("ac", "231", 18);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(false);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			}
			// Test for not valid password.
			@Test
			public void testPass() throws IOException {
				var credCheck = new CredentialCheck("abc", "231abc", 18);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(false);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			}
			// Test for not valid age
			@Test
			public void testAge() throws IOException {
				var credCheck = new CredentialCheck("abc", "231ac", 12);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(false);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			} 
			//test age and pass not valid
			@Test 
			public void testAgePass() throws IOException {
				var credCheck = new CredentialCheck("abc", "231abc", 12);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(false);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			}
			//test age and user not valid
			@Test 
			public void testAgeUser() throws IOException {
				var credCheck = new CredentialCheck("ac", "231abc", 12);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(false);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			}
			//test pass and user not valid
			@Test 
			public void testPassUser() throws IOException {
				var credCheck = new CredentialCheck("ac", "231ac", 20);

				// Invoke the hasValidCredentials method and capture its output
				boolean result = credCheck.hasValidCredentials();

				// Convert the result to String for comparison
				String output = Boolean.toString(result);
				String expect = Boolean.toString(false);  // Expected value is true

				// Compare the expected and actual output
				boolean passed = getResults(expect, output, "hasValidCredentials()");

				// Assert that the test passes
				assertTrue(passed);
			}

		}
      </tests>
    </program>
  </activity>
  
  
   <activity label="imp-return-refactoringCredentialCheck-response">
    <statement>
      <p>
        Compare your refactored code with the solution below. Did you refactor correctly?
      </p>
    </statement>
    <choices>
     <choice correct="yes"> <statement> Ye. Three functions required refactoring </statement> </choice>
     <choice correct="no"> <statement> No   </statement> </choice>
    </choices>

	 <statement>
       <program language="java">
          <input>
       <![CDATA[
		public class CredentialCheck {
			private String username;
			private String password;
			private int age;

			// Constructor to initialize the fields
			public CredentialCheck(String username, String password, int age) {
				this.username = username;
				this.password = password;
				this.age = age;
			}

			// Check if the credentials are valid
			public boolean hasValidCredentials() {
				return isValidUsername() && isValidPassword() && age >= 18;
			}

			// Check if the username is valid
			private boolean isValidUsername() {
				 return username != null && username.length() >= 3 && username.length() < 10;
			}			
					

			// Check if the password is valid
			private boolean isValidPassword() {
				return password != null && isValidUsername() && !password.contains(username);
			}
		}


			
        ]]>
      </input>	
        </program>
      </statement>
      
  </activity>
  
  
  
</section>

